// <auto-generated />
using System;
using Blog.Repository.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Blog.Api.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20220320145051_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Blog.Entities.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 2, DateTimeKind.Utc).AddTicks(7566));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Thumbnail")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasDefaultValue("default.jpg");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 2, DateTimeKind.Utc).AddTicks(7850));

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("507462a3-5639-4573-b7d9-306d560a7ca8"),
                            CategoryId = new Guid("5533e9a6-186f-4a3d-9ef4-63a2f7c02eb2"),
                            CommentCount = 2,
                            Content = "ilk makalenin içeriği",
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1869),
                            IsActive = true,
                            Keywords = "{}",
                            LikeCount = 33,
                            PublishedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1881),
                            Slug = "ilk-makale",
                            Thumbnail = "default.jpg",
                            Title = "ilk makale",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1878),
                            UserId = new Guid("c91266a4-35d3-4b60-89aa-6fa26c33c908")
                        },
                        new
                        {
                            Id = new Guid("15cd7fe9-3d73-4028-b3f1-0e8a09112570"),
                            CategoryId = new Guid("5533e9a6-186f-4a3d-9ef4-63a2f7c02eb2"),
                            CommentCount = 3,
                            Content = "ikinci makalenin içeriği",
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1887),
                            IsActive = true,
                            Keywords = "{}",
                            LikeCount = 25,
                            PublishedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1892),
                            Slug = "ikinci-makale",
                            Thumbnail = "default.jpg",
                            Title = "ikinci makale",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1889),
                            UserId = new Guid("45b533cd-ed21-4eb7-bb90-8838b6f9486c")
                        },
                        new
                        {
                            Id = new Guid("d1267b3b-c386-4481-804b-17c38c28d122"),
                            CategoryId = new Guid("1bbc4e68-3e73-4f11-bd09-11ba71b5b582"),
                            CommentCount = 1,
                            Content = "üçüncü makalenin içeriği",
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1895),
                            IsActive = true,
                            Keywords = "{}",
                            LikeCount = 11,
                            PublishedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1899),
                            Slug = "ucuncu-makale",
                            Thumbnail = "default.jpg",
                            Title = "üçüncü makale",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1896),
                            UserId = new Guid("45b533cd-ed21-4eb7-bb90-8838b6f9486c")
                        },
                        new
                        {
                            Id = new Guid("ddb5c34f-518c-4189-ae3a-fe9103558500"),
                            CategoryId = new Guid("1bbc4e68-3e73-4f11-bd09-11ba71b5b582"),
                            CommentCount = 5,
                            Content = "dördüncü makalenin içeriği",
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1902),
                            IsActive = true,
                            Keywords = "{}",
                            LikeCount = 10,
                            PublishedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1906),
                            Slug = "dorduncu-makale",
                            Thumbnail = "default.jpg",
                            Title = "dördüncü makale",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(1903),
                            UserId = new Guid("c91266a4-35d3-4b60-89aa-6fa26c33c908")
                        });
                });

            modelBuilder.Entity("Blog.Entities.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(2648));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TagName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(2917));

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5533e9a6-186f-4a3d-9ef4-63a2f7c02eb2"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(6470),
                            IsActive = true,
                            MainCategoryId = new Guid("eec3877e-de06-47a5-9f29-764cebf7851d"),
                            Name = "Yazılım",
                            TagName = "YZL",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(6478)
                        },
                        new
                        {
                            Id = new Guid("1bbc4e68-3e73-4f11-bd09-11ba71b5b582"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(6484),
                            IsActive = true,
                            MainCategoryId = new Guid("11070708-1c30-4967-9bcf-433e703f348a"),
                            Name = "Sinema",
                            TagName = "SİN",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(6486)
                        });
                });

            modelBuilder.Entity("Blog.Entities.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(1278));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(1497));

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8d2fc77-9c77-48fe-9e7b-4f47c34fe27e"),
                            ArticleId = new Guid("507462a3-5639-4573-b7d9-306d560a7ca8"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(5085),
                            IsActive = true,
                            Text = "örnek yorum 1",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(5096),
                            UserId = new Guid("c91266a4-35d3-4b60-89aa-6fa26c33c908")
                        },
                        new
                        {
                            Id = new Guid("e8acb53c-0f5d-44c6-bc2d-14f2afce41c7"),
                            ArticleId = new Guid("15cd7fe9-3d73-4028-b3f1-0e8a09112570"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(5103),
                            IsActive = true,
                            Text = "örnek yorum 3",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(5106),
                            UserId = new Guid("45b533cd-ed21-4eb7-bb90-8838b6f9486c")
                        },
                        new
                        {
                            Id = new Guid("fcda26c7-2469-415f-b2bf-7b2571c11e4a"),
                            ArticleId = new Guid("d1267b3b-c386-4481-804b-17c38c28d122"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(5111),
                            IsActive = true,
                            Text = "örnek yorum 2",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(5113),
                            UserId = new Guid("c91266a4-35d3-4b60-89aa-6fa26c33c908")
                        });
                });

            modelBuilder.Entity("Blog.Entities.Entities.ParentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(5749));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(5923));

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ParentCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eec3877e-de06-47a5-9f29-764cebf7851d"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(6631),
                            IsActive = true,
                            Name = "Bilim",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(6637)
                        },
                        new
                        {
                            Id = new Guid("11070708-1c30-4967-9bcf-433e703f348a"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(6640),
                            IsActive = true,
                            Name = "Kültür",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(6641)
                        });
                });

            modelBuilder.Entity("Blog.Entities.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(7176));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasDefaultValue("User");

                    b.Property<bool>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 3, DateTimeKind.Utc).AddTicks(7490));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c91266a4-35d3-4b60-89aa-6fa26c33c908"),
                            BirthDate = new DateTime(1995, 12, 27, 22, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(278),
                            Email = "necil@necil.com",
                            FirstName = "Çakmak",
                            Gender = true,
                            IsActive = true,
                            IsApproved = false,
                            LastName = "Necil",
                            Password = "$2a$11$wnQMJKF1vC6fAxs5IDaM1.5S3oMG.gEQMhON0bHUl5UQfe8v1AwIK",
                            RoleName = "Admin",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(286),
                            UserName = "necilcakmak"
                        },
                        new
                        {
                            Id = new Guid("45b533cd-ed21-4eb7-bb90-8838b6f9486c"),
                            BirthDate = new DateTime(1990, 11, 17, 22, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(374),
                            Email = "ömer@ömer.com",
                            FirstName = "Gürsoy",
                            Gender = false,
                            IsActive = true,
                            IsApproved = false,
                            LastName = "Ömer",
                            Password = "$2a$11$uNx/XA0odP6BAp8xKqtkausOYVPqmGNmq1GYK/y0E6OgQNb/7XIfC",
                            RoleName = "Admin",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(377),
                            UserName = "ömergürsoy"
                        },
                        new
                        {
                            Id = new Guid("30d00d67-4f1e-405f-a992-f9ef825550c8"),
                            BirthDate = new DateTime(1985, 9, 24, 21, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(390),
                            Email = "server@dogan.com",
                            FirstName = "Doğan",
                            Gender = false,
                            IsActive = true,
                            IsApproved = false,
                            LastName = "Server",
                            Password = "$2a$11$uNx/XA0odP6BAp8xKqtkausOYVPqmGNmq1GYK/y0E6OgQNb/7XIfC",
                            RoleName = "User",
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(392),
                            UserName = "serverdogan"
                        });
                });

            modelBuilder.Entity("Blog.Entities.Entities.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(7126));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("NewBlog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ReceiveMail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(7363));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ff845a2-ad00-4158-8b4a-061a5764c789"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(8918),
                            IsActive = true,
                            NewBlog = true,
                            ReceiveMail = true,
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(8926),
                            UserId = new Guid("c91266a4-35d3-4b60-89aa-6fa26c33c908")
                        },
                        new
                        {
                            Id = new Guid("e88c8860-4b9a-4736-9ed3-5cf23a75a86b"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(8930),
                            IsActive = true,
                            NewBlog = true,
                            ReceiveMail = true,
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(8931),
                            UserId = new Guid("45b533cd-ed21-4eb7-bb90-8838b6f9486c")
                        },
                        new
                        {
                            Id = new Guid("a6bacb41-6666-4f2c-b5c8-afdac80f2026"),
                            CreatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(8935),
                            IsActive = true,
                            NewBlog = true,
                            ReceiveMail = true,
                            UpdatedDate = new DateTime(2022, 3, 20, 14, 50, 51, 4, DateTimeKind.Utc).AddTicks(8936),
                            UserId = new Guid("30d00d67-4f1e-405f-a992-f9ef825550c8")
                        });
                });

            modelBuilder.Entity("Blog.Entities.Entities.Article", b =>
                {
                    b.HasOne("Blog.Entities.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entities.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Category", b =>
                {
                    b.HasOne("Blog.Entities.Entities.ParentCategory", "ParentCategory")
                        .WithMany("Categories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Comment", b =>
                {
                    b.HasOne("Blog.Entities.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entities.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Entities.Entities.UserSetting", b =>
                {
                    b.HasOne("Blog.Entities.Entities.User", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("Blog.Entities.Entities.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Blog.Entities.Entities.ParentCategory", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Blog.Entities.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("UserSetting")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
