@page "/login"
@using Blog.Ui.Services.Auth
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<div class="container">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <h2 class="text-center text-dark mt-5">Login Form</h2>
            <div class="card my-5">
                <EditForm Model=@loginDto OnValidSubmit="login" class="card-body cardbody-color p-lg-5">

                    <span class="text-danger">@errorText</span>
                    <br />

                    <div class="form-group">
                        <input placeholder="E-mail"
                               type="text"
                               class="form-control"
                               @bind-value="loginDto.Email" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Password"
                               type="password"
                               class="form-control"
                               @bind-value="loginDto.Password" />
                    </div>
                    <div class="text-center">
                        <CustomButton Text="Login" Type="submit" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@code {
    [Inject]
    IAuthService authService { get; set; }

    [Inject]
    ModalManager modalManager { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    private string errorText = "";

    private LoginDto loginDto = new();
    public async Task login()
    {
        var res = await authService.Login(loginDto);
        if (res.Success)
        {
            await modalManager.ShowMessageAsync("Login Success", res.Message);
            await localStorage.SetItemAsync("token", res.Data.Token);
            navigationManager.NavigateTo("/");
        }
        else
        {
            await modalManager.ShowMessageAsync("Login Error", res.Message);
        }
    }
}
